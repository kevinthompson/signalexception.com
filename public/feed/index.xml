<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Kevin Thompson</title>
 <link href="http://kevinthompson.info/feed" rel="self"/>
 <link href="http://kevinthompson.info/"/>
 <updated>2012-04-29T01:54:27-07:00</updated>
 <id>http://warpspire.com/</id>
 <author>
   <name>Kevin Thompson</name>
   <email>kevin@kevinthompson.info</email>
 </author>

 
 <entry>
   <title>Start Required Processes on Pow Application Boot</title>
   
     <link href="http://kevinthompson.info/blog/start-required-processes-on-pow-application-boot" />
   
   <updated>2012-04-29T00:00:00-07:00</updated>
   <id>http://kevinthompson.info/blog/start-required-processes-on-pow-application-boot</id>
   <content type="html">&lt;p&gt;Using &lt;a href=&quot;http://pow.cx/&quot;&gt;Pow&lt;/a&gt; to serve your Rack apps makes managing multiple applications a breeze, but you may still find yourself manually starting up additional processes that your apps depend on. Luckily, Pow provides us with a few hooks to automate these processes as well.&lt;/p&gt;

&lt;!&#8211; more &#8211;&gt;


&lt;p&gt;In the &lt;a href=&quot;http://pow.cx/manual.html&quot;&gt;Pow Manual&lt;/a&gt; under section 2.2, &amp;ldquo;&lt;a href=&quot;http://pow.cx/manual.html#section_2.2&quot;&gt;Customizing Environment Variables&lt;/a&gt;&amp;rdquo;, we&amp;rsquo;re given an overview of how we might customize the environment for our worker processes through the &lt;code&gt;.powrc&lt;/code&gt; and &lt;code&gt;.powenv&lt;/code&gt; files. However, because these files simply execute a series of bash commands, we can add much more than environment variable exports to our application boot process.&lt;/p&gt;

&lt;p&gt;For example, most of the projects I&amp;rsquo;ve been contributing to lately use MongoDB, and as such, I need to have an instance of the &lt;code&gt;mongod&lt;/code&gt; process running in order to connect to my databases. To avoid the inevitable application startup error, or having to manually check for an existing MongoDB process, I can simply add the following code to my &lt;code&gt;.powrc&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Start MongoDB
if ! ps ax | grep -v grep | grep &#8216;mongod&#8217; &amp;gt; /dev/null
then
  mongod -port 27017 &amp;lt;/dev/null &amp;amp;&amp;gt;/dev/null &amp;amp;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These few lines are all I need to check for a &lt;code&gt;mongod&lt;/code&gt; process, and automatically start it if it&amp;rsquo;s not already running when my application is booted.&lt;/p&gt;

&lt;p&gt;If you want to test the functionality in your &lt;code&gt;.rvmrc&lt;/code&gt; file, you can run the files directly from your project directory: &lt;code&gt;./.rvmrc&lt;/code&gt;. If you&amp;rsquo;re going to be executing this file directly, I would recommend rounding out your code with a few echos for clarity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ! ps ax | grep -v grep | grep &#8216;mongod&#8217; &amp;gt; /dev/null
then
  echo &quot;Starting MongoDB server&#8230;&quot;
  mongod -port 27017 &amp;lt;/dev/null &amp;amp;&amp;gt;/dev/null &amp;amp;
  echo &quot;MongoDB is now up and running.&quot;
else
  echo &quot;Relax bro. MongoDB is already running.&quot;
fi
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>iPhone &amp; iPad Browser Testing Using the iOS Simulator</title>
   
     <link href="http://kevinthompson.info/blog/iphone-and-ipad-browser-testing-using-the-ios-simulator" />
   
   <updated>2011-07-24T00:00:00-07:00</updated>
   <id>http://kevinthompson.info/blog/iphone-and-ipad-browser-testing-using-the-ios-simulator</id>
   <content type="html">&lt;p&gt;On more than one occasion I&amp;rsquo;ve had clients, as well as fellow designers and developers, ask me to assist them in building a mobile (or iPhone specific) version of their website, following their request immediately with something like, &amp;ldquo;You do have an iPhone, right?&amp;rdquo;&lt;/p&gt;

&lt;!&#8211; more &#8211;&gt;


&lt;p&gt;I do happen to have an iPhone (although no iPad), but I rarely need to pick it up when developing and testing websites for iOS devices. Instead, I use the iOS Simulator.&lt;/p&gt;

&lt;div class=&quot;img&quot;&gt;&lt;img src=&quot;/images/blog/ios-browser-testing.jpg&quot; /&gt;&lt;/div&gt;


&lt;h2&gt;Why Should You Use iOS Simulator?&lt;/h2&gt;

&lt;p&gt;Beyond simply being able to test websites on Mobile Safari without having a physical device, iOS Simulator has a few other advantages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Local Development Sites&lt;/strong&gt; – Using the iOS simulator, you can easily access development sites on your local machine that might otherwise be difficult to do so.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Physical Keyboard&lt;/strong&gt; – Instead of pecking away at on onscreen keyboard, you can save yourself a bit of time using the real thing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Environments&lt;/strong&gt; – Easily test iPhones and iPads of varying screen resolutions in both possible orientations.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Getting up and running with the iOS Simulator is extremely simple and really takes just two quick steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://itunes.apple.com/us/app/xcode/id448457090?mt=12&amp;amp;partnerId=30&amp;amp;siteID=p8StJ7oxYpg-OcLxYt38ZD0gQu4327dDCg&quot;&gt;Install Xcode&lt;/a&gt; from the Mac App Store (Free)&lt;/li&gt;
&lt;li&gt;Launch iOS Simulator&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Once Xcode is in stalled, The iOS Simulator can be found at &lt;code&gt;/Developer/Platforms/iPhoneSimulator.platform/Developer/Applications/iPhone Simulator.app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The iOS Simulator can also be found and launched through Spotlight,  &lt;code&gt;⌘ + space&lt;/code&gt;, but it may take time for Spotlight to index the new files. If you&amp;rsquo;re using an application launcher such &lt;a href=&quot;http://alfredapp.com&quot;&gt;Alfred&lt;/a&gt;, you might need to add &lt;code&gt;/Developer&lt;/code&gt; to the &lt;a href=&quot;http://help.alfredapp.com/indexing/&quot;&gt;applications scope&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After opening the iOS Simulator, simply launch Mobile Safari and direct the browser to your website of choice.&lt;/p&gt;

&lt;h2&gt;Tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Using the &lt;code&gt;⌘ + ←&lt;/code&gt; and &lt;code&gt;⌘ + →&lt;/code&gt; hotkeys you can quickly change the orientation of the iOS device.&lt;/li&gt;
&lt;li&gt;You can assign hotkeys to various iOS devices using the Keyboard  Shortcuts panel of the Keyboard Preferences pane in System Preferences (see &lt;a href=&quot;http://support.apple.com/kb/ht2490#l4&quot;&gt;http://support.apple.com/kb/ht2490#l4&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Script debugging can be enabled for Mobile Safari through the iOS Settings app under the Safari tab.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Hiding JavaScript-Dependent Content</title>
   
     <link href="http://kevinthompson.info/blog/hiding-javascript-dependent-content" />
   
   <updated>2011-07-15T00:00:00-07:00</updated>
   <id>http://kevinthompson.info/blog/hiding-javascript-dependent-content</id>
   <content type="html">&lt;p&gt;When implementing various JavaScript-dependent solutions such as image sliders and accordions, its easy to start throwing around &lt;code&gt;display:none;&lt;/code&gt; attributes in your CSS to avoid seeing a flash of content before it&amp;rsquo;s removed by your JavaScript, but there&amp;rsquo;s another way to achieve the same result without alienating users that may have JavaScript disabled.&lt;/p&gt;

&lt;!&#8211; more &#8211;&gt;


&lt;p&gt;In order to ensure that your content remains visible when users happen to encounter it with JavaScript disabled, avoid hiding elements with CSS alone. Instead, apply a simple class to your &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag early during page rendering, then prefix JavaScript-dependent CSS with that class.&lt;/p&gt;

&lt;h2&gt;Example&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/1085836.js?file=index.html&quot;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&quot;https://gist.github.com/1085836&quot;&gt;Available on Github &amp;raquo;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/1085836.js?file=style.css&quot;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&quot;https://gist.github.com/1085836&quot;&gt;Available on Github &amp;raquo;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By using this method, you&amp;rsquo;ve first verified that JavaScript is enabled before hiding content that your user may otherwise be deprived of.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Trevor Monk</title>
   
     <link href="http://kevinthompson.info/recommendations/trevor-monk-recommends-kevin-thompson" />
   
   <updated>2011-07-13T00:00:00-07:00</updated>
   <id>http://kevinthompson.info/recommendations/trevor-monk-recommends-kevin-thompson</id>
   <content type="html">&lt;p&gt;Kevin is a very talented developer who is exceptionally good at User Interface design. He keeps himself up-to-date with trends and advances in technology and has the demonstrable ability to apply those techniques effectively in the sites and pages he creates. An excellent thinker and a great resource.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Brian Gerry</title>
   
     <link href="http://kevinthompson.info/recommendations/brian-gerry-recommends-kevin-thompson" />
   
   <updated>2011-06-30T00:00:00-07:00</updated>
   <id>http://kevinthompson.info/recommendations/brian-gerry-recommends-kevin-thompson</id>
   <content type="html">&lt;p&gt;I&amp;rsquo;ve had the opportunity to work with Kevin on several fast turn web projects. Kevin is a unique and highly talented individual with a wealth of knowledge in web development and user interaction. In addition, he has an almost clairvoyant sense of how long it will take to put a site together.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ania Potocki</title>
   
     <link href="http://kevinthompson.info/recommendations/ania-potocki-recommends-kevin-thompson" />
   
   <updated>2011-06-28T00:00:00-07:00</updated>
   <id>http://kevinthompson.info/recommendations/ania-potocki-recommends-kevin-thompson</id>
   <content type="html">&lt;p&gt;I&amp;rsquo;ve just recently began working with Kevin, and he is a breath of fresh air. As a developer he holds all the characteristics you would want / need. He is very knowledgeable, he works quickly, he knows how to communicate, he is a problem solver &amp;ndash; always finding the best solution, he is honest and trustworthy, he meets his deadlines, he is always responsive and has a great personality&amp;hellip; what more could you ask for?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Placeholder Image Services</title>
   
     <link href="http://kevinthompson.info/blog/placeholder-image-services" />
   
   <updated>2011-03-10T00:00:00-08:00</updated>
   <id>http://kevinthompson.info/blog/placeholder-image-services</id>
   <content type="html">&lt;p&gt;From time to time, I find myself needing to create a quick HTML document to exemplify a concept, or to explore and alternative layouts in an existing project. When these quick and dirty prototypes need to include some form of imagery, I turn to one of my favorite placeholder image services.&lt;/p&gt;

&lt;!&#8211; more &#8211;&gt;


&lt;p&gt;Depending on the type of page I&amp;rsquo;m creating (wireframe, mockup, whimsical tomfoolery), I typically choose from one of three services.&lt;/p&gt;

&lt;h2&gt;Placehold.it&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://placehold.it&quot;&gt;Placehold.it&lt;/a&gt; is a simple, yet versatile, solution that I often use when creating wireframes. When wireframing, I typically do not want to portray any particular visual aesthetic, so the bare, monochromatic images from Placehold.it are ideal.&lt;/p&gt;

&lt;p&gt;These images can be passed as little as the image width, or as much as the width, height, format, color, and text:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&quot;http://placehold.it/300&quot; /&amp;gt;
&amp;lt;img src=&quot;http://placehold.it/400x200.png&quot; /&amp;gt;
&amp;lt;img src=&quot;http://placehold.it/200/09f/&amp;amp;text=Ad Unit&quot; /&amp;gt;
&amp;lt;img src=&quot;http://placehold.it/600x100/09f/fff.png&amp;amp;text=Big Blue Image!&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;img&quot;&gt;&lt;img src=&quot;http://placehold.it/600x100/09f/fff.png&amp;text=Big Blue Image!&quot; alt=&quot;Placehold.it Example&quot; /&gt;&lt;/div&gt;


&lt;h2&gt;FlickHoldr.com&lt;/h2&gt;

&lt;p&gt;When I need images with a bit more substance, such as when I&amp;rsquo;m mocking up a new layout for an existing site, I&amp;rsquo;ll often use &lt;a href=&quot;http://flickholdr.com&quot;&gt;FlickHoldr.com&lt;/a&gt;, which can pull images based on a set of tags from &lt;a href=&quot;http://flickr.com&quot;&gt;Flickr&lt;/a&gt;, to find images that suit the project.&lt;/p&gt;

&lt;p&gt;FlickHoldr.com requires you send at least the width an height parameters of your image, but unlike Placehold.it, you can also specify tags, whether or not an image is black and white, and also an offset, which allows you to pull different images for the same size and tags:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&quot;http://flickholdr.com/300/300/&quot; /&amp;gt;
&amp;lt;img src=&quot;http://flickholdr.com/300/300/2/&quot; /&amp;gt;
&amp;lt;img src=&quot;http://flickholdr.com/200/300/sea,sun/1/&quot; /&amp;gt;
&amp;lt;img src=&quot;http://flickholdr.com/400/200/kenny meyers,fetish/2/&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;img&quot;&gt;&lt;img src=&quot;http://flickholdr.com/400/200/abstract,object/2/&quot; /&gt;&lt;/div&gt;


&lt;h2&gt;Placekitten.com&lt;/h2&gt;

&lt;p&gt;Of the three, &lt;a href=&quot;http://placekitten.com&quot;&gt;Placekitten.com&lt;/a&gt; tends to get the least use, but there&amp;rsquo;s still that rare occasion where you just need pictures of kittens. Placekitten.com doesn&amp;rsquo;t accept many parameters, in fact all they accept is width, height, and an option for black and white images:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&quot;http://placekitten.com/300/&quot; /&amp;gt;
&amp;lt;img src=&quot;http://placekitten.com/300/100&quot; /&amp;gt;
&amp;lt;img src=&quot;http://placekitten.com/g/600/100&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;img&quot;&gt;&lt;img src=&quot;http://placekitten.com/g/600/100&quot; /&gt;&lt;/div&gt;


&lt;hr /&gt;

&lt;p&gt;All three of these are great services that can help expedite your workflow, and while I&amp;rsquo;ve given you a few examples here, I&amp;rsquo;d recommend clicking through to each of them and reviewing their options. Figure out what works for you and have fun. If you know of any other placeholder image services, let me know in comments below!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Securing Your Staging Environment</title>
   
     <link href="http://kevinthompson.info/blog/securing-your-staging-environment" />
   
   <updated>2011-03-09T00:00:00-08:00</updated>
   <id>http://kevinthompson.info/blog/securing-your-staging-environment</id>
   <content type="html">&lt;p&gt;While working as a part of a team or with a remote client, it&amp;rsquo;s often beneficial to have a staging environment accessible outside of your local office or VPN for quality assurance, editorial review, or client approval. However, when configuring your staging environment, there are several precautions you should take in order to guarantee the security and privacy of your work.&lt;/p&gt;

&lt;!&#8211; more &#8211;&gt;


&lt;h2&gt;Restrict Search Engine Access&lt;/h2&gt;

&lt;p&gt;In order to stop users from finding your staging environment in search engines, and also to avoid any &lt;a href=&quot;http://www.google.com/support/webmasters/bin/answer.py?hl=en&amp;amp;answer=66359&quot;&gt;duplicate content issues&lt;/a&gt; that could negatively impact the rankings of your production site, you&amp;rsquo;ll want add a restriction to the &lt;code&gt;robots.txt&lt;/code&gt; file at the public root of our sites:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User-agent: *
Disallow: /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two lines alone, when added to our &lt;code&gt;robots.txt&lt;/code&gt; file, will tell search engines to ignore all content on the site beginning at the root URL.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Be sure to remove these rules from the robots.txt file on your production site, otherwise it will not be indexed by search engines.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Require User Login&lt;/h2&gt;

&lt;p&gt;While adding a rule to your &lt;code&gt;robots.txt&lt;/code&gt; file will stop search engines from indexing your staging environment, it will still be possible for users to access it unless you implement some form of user authentication. If you&amp;rsquo;re using an editorial platform or content management system such as Wordpress or ExpressionEngine, there is typically an option available in the site&amp;rsquo;s configuration, or a plugin that can be installed that will disable access to all unauthorized users.&lt;/p&gt;

&lt;p&gt;For example, in ExpressionEngine, this option can be found in Admin &gt; General Configuration &gt; Is system on?. Once this option is changed to &amp;ldquo;no&amp;rdquo;, only member groups who&amp;rsquo;ve been allowed to view the site in offline mode will be able to access it.&lt;/p&gt;

&lt;h2&gt;HTTP Authentication&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re not using a platform that&amp;rsquo;s already capable of restricting user access, or you&amp;rsquo;ve yet to build user authentication into your site and you&amp;rsquo;re hosting the project on Apache, you can use basic HTTP authentication to limit access.&lt;/p&gt;

&lt;p&gt;To create your HTTP authentication files, first create a file named &lt;code&gt;.htpasswd&lt;/code&gt; and place it in your site root (take note of the full server path to this file as you&amp;rsquo;ll need it in the next step). Next, use the &lt;a href=&quot;http://www.htaccesstools.com/htpasswd-generator/&quot;&gt;htaccesstools.com htpassword generator&lt;/a&gt; to create username and password pairs that will be added to your &lt;code&gt;.htpasswd&lt;/code&gt; file. After adding each username and password pair to your &lt;code&gt;.htpasswd&lt;/code&gt; file, use the &lt;a href=&quot;http://www.htaccesstools.com/htaccess-authentication/&quot;&gt;htaccess authentication generator&lt;/a&gt; to create the authentication rules that will be added to your website&amp;rsquo;s &lt;code&gt;.htaccess&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Once these steps have been completed, when accessing a secure area of your site, you should be prompted to enter your username and password.&lt;/p&gt;

&lt;p&gt;What steps do you take to secure your staging or beta environments? Share your tips in the comments below!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Discovering Version Control &amp; Deployment Systems</title>
   
     <link href="http://kevinthompson.info/blog/discovering-version-control-and-deployment-systems" />
   
   <updated>2011-03-06T00:00:00-08:00</updated>
   <id>http://kevinthompson.info/blog/discovering-version-control-and-deployment-systems</id>
   <content type="html">&lt;p&gt;For the last few years, I&amp;rsquo;ve managed and deployed my code using archaic, time consuming methods. Version control meant duplicating and renaming folders, and deployment was simply dragging and dropping files into an ftp client.&lt;/p&gt;

&lt;!&#8211; more &#8211;&gt;


&lt;p&gt;While I had worked with version control systems in the past, I had yet to reach a point where I felt particularly comfortable working with them and, at the time, they seemed to be more of an inconvenience than anything. I did however recognize the potential benefits of using a VCS, so I continued to follow the growth of systems such SVN and Git.&lt;/p&gt;

&lt;h2&gt;Enter Github&lt;/h2&gt;

&lt;p&gt;Although &lt;a href=&quot;http://github.com&quot;&gt;Github&lt;/a&gt; has been around for several years, it was only recently that I found myself using the site on an almost daily basis, following links from various open source projects or for addons and applications being developed by my friends and colleagues. Once I realized how much I had come to enjoy following and exploring repositories on Github, I knew I needed to make a greater effort in adopting some sort of version control system myself.&lt;/p&gt;

&lt;p&gt;I began researching &lt;a href=&quot;http://subversion.tigris.org/&quot;&gt;SVN&lt;/a&gt;, &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;, and &lt;a href=&quot;http://mercurial.selenic.com/&quot;&gt;Mercurial&lt;/a&gt; in greater detail, but ultimately articles such as &lt;a href=&quot;http://thenerdary.net/articles/entry/how_i_use_git&quot;&gt;&amp;ldquo;How I use Git&amp;rdquo;&lt;/a&gt; and &lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;&amp;ldquo;A successful Git branching model&amp;rdquo;&lt;/a&gt;, along with my new found affinity for Github, lead me to use Git over the alternatives. I breezed through a &lt;a href=&quot;http://learn.github.com/p/intro.html&quot;&gt;few quick tutorials&lt;/a&gt; on Git and before long I had created &lt;a href=&quot;http://github.com/kevinthompson&quot;&gt;a number of repositories on Github&lt;/a&gt; and was thoroughly enjoying every &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, and &lt;code&gt;merge&lt;/code&gt;. For whatever reason, where previous version control systems had been difficult to adopt, Git just clicked.&lt;/p&gt;

&lt;p&gt;While this new found workflow made development a breeze, I was still fumbling my way through deployment. Since it was easy enough to clone a repository with Git, I decided to clone a repository on the production server, then shell into the server and issue a &lt;code&gt;git pull&lt;/code&gt; when I needed to deploy. While this was simpler than manually transferring files via FTP, it still required a few too many steps to make deploying my code the casual process I wanted it to be. To further simplify things, I wrote a shell script and setup a dedicated user for deployment on each server so that I could easily issue a command on my local machine and off the code would go. This, again, was another degree simpler, but the maintenance and management of these scripts and users still stole time away from development.&lt;/p&gt;

&lt;h2&gt;Enter Beanstalk&lt;/h2&gt;

&lt;p&gt;While researching Git, &lt;a href=&quot;http://bnst.lk/e3HdOt&quot;&gt;Beanstalk&lt;/a&gt; was also mentioned fairly frequently in more recent articles. Beanstalk is a service that, for a small fee, will quickly deploy code from a Git or SVN repository over FTP with little to no effort. I decided to give Beanstalk a shot and signed up for their trial account. If you&amp;rsquo;re already familiar with Git or SVN, Beanstalk makes deployment a breeze. Once you&amp;rsquo;ve started your account, you&amp;rsquo;ll need to define your servers and configure deployment for each.&lt;/p&gt;

&lt;p&gt;In my case, I typically have a staging environment and a production environment (with development being done on my local machine). I configure Beanstalk to automatically deploy my &lt;code&gt;staging&lt;/code&gt; branch to my staging server on each push, and my &lt;code&gt;master&lt;/code&gt; branch to my production server manually from the Beanstalk interface, or when I append &lt;code&gt;[deploy:production]&lt;/code&gt; to a commit message in my master branch (or on a commit message merged into the master branch). With this configuration, it&amp;rsquo;s become trivial to deploy my code to either environment.&lt;/p&gt;

&lt;p&gt;The addition of &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; and &lt;a href=&quot;http://bnst.lk/e3HdOt&quot;&gt;Beanstalk&lt;/a&gt; to my workflow has not only simplified the management and deployment of code, but it&amp;rsquo;s also allowed me to spend more time doing what I truly enjoy, developing web applications.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Completely Remove index.php from ExpressionEngine URLs</title>
   
     <link href="http://kevinthompson.info/blog/completely-remove-index-php-from-expressionengine-urls" />
   
   <updated>2011-03-04T00:00:00-08:00</updated>
   <id>http://kevinthompson.info/blog/completely-remove-index-php-from-expressionengine-urls</id>
   <content type="html">&lt;p&gt;While there are a &lt;a href=&quot;http://expressionengine.com/wiki/Remove_index.php_From_URLs/&quot;&gt;number of known solutions&lt;/a&gt; for removing &lt;code&gt;index.php&lt;/code&gt; from ExpressionEngine URLs, few developers realize that although URLs now resolve without &lt;code&gt;index.php&lt;/code&gt;, the previous URLs including &lt;code&gt;index.php&lt;/code&gt; also still exist.&lt;!&#8211;more&#8211;&gt;&lt;/p&gt;

&lt;!&#8211; more &#8211;&gt;


&lt;h2&gt;The Example&lt;/h2&gt;

&lt;p&gt;At the time of this writing, if you were to visit &lt;a href=&quot;http://expressionengine.com/index.php/overview/&quot;&gt;http://expressionengine.com/index.php/overview/&lt;/a&gt; or &lt;a href=&quot;http://expressionengine.com/overview/&quot;&gt;http://expressionengine.com/overview/&lt;/a&gt;, you&amp;rsquo;d be presented with the exact same page. Having the same content resolve at two distinct URLs can potentially harm &lt;a href=&quot;http://www.google.com/support/webmasters/bin/answer.py?hl=en&amp;amp;answer=66359&quot;&gt;your search engine rankings&lt;/a&gt; and disrupt your analytics.&lt;/p&gt;

&lt;h2&gt;The Rules&lt;/h2&gt;

&lt;script src=&quot;https://gist.github.com/798018.js?file=.htaccess&quot;&gt;&lt;/script&gt;


&lt;p class=&quot;gist-link&quot;&gt;&lt;a href=&quot;https://gist.github.com/798018&quot;&gt;Available on Github &amp;raquo;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;The Story&lt;/h2&gt;

&lt;p&gt;A few weeks ago, while optimizing an ExpressionEngine installation, I was working to ensure that all invalid URLs either redirected to the appropriate URL, or returned a 404 error as necessary. During this process, I realized that URLs beginning with &lt;code&gt;index.php&lt;/code&gt; still resolved, even though I thought I had removed &lt;code&gt;index.php&lt;/code&gt; completely from URLs. I struggled for a few hours with various mod_rewrite rules in my &lt;code&gt;.htaccess&lt;/code&gt; file but they all lead me into redirect loops. I ultimately settled on adding a &lt;code&gt;&amp;lt;link rel=&quot;canonical&quot; href=&quot;&#8230;&quot; /&amp;gt;&lt;/code&gt; tag to all pages and added a rule to my &lt;code&gt;robots.txt&lt;/code&gt; file that would stop spiders from crawling the additional URLs.&lt;/p&gt;

&lt;p&gt;Although duplicate content was no longer a concern, as search engines should no longer see the &lt;code&gt;index.php&lt;/code&gt; URLs, the fact that they existed, and that a user could potentially find the duplicate URL, still bothered me. I could have redirected users using PHP, but in this instance it seemed like a bit of a hack, and I couldn&amp;rsquo;t shake the feeling that there had to be a way to solve this with a mod_rewrite rule. I happened to be working through this issue on a thursday evening, so I decided to pop into the weekly &lt;a href=&quot;https://eescreencasts.campfirenow.com/room/177927&quot;&gt;ExpressionEngine Help Chat&lt;/a&gt; to see if anyone else had come across it.&lt;/p&gt;

&lt;p&gt;I asked my question and received a number of responses confirming the issue, but not offering much in the way of a solution. I left the chat open and continued tinkering with my &lt;code&gt;.htaccess&lt;/code&gt; file. After a while I decided to check back in on the EE Help Chat, and to my surprise, &lt;a href=&quot;http://twitter.com/erikreagan&quot;&gt;Erick Reagan&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/nevinlyne&quot;&gt;Nevin Lyne&lt;/a&gt; had worked out a potential solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteCond %{THE_REQUEST} ^[^/]*/index&#46;php [NC]
RewriteRule ^index&#46;php(.+) $1 [R=301,L]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I quickly modified my .htaccess file and sure enough, this new rule was able to catch URL requests beginning with index.php and issue a 301 redirect to the correct URL. The trick to circumventing the redirect loops I was encountering was using &lt;code&gt;%{THE_REQUEST}&lt;/code&gt; to match the request string as opposed to the actual URL.&lt;/p&gt;

&lt;p&gt;Thanks to Erik and Nevin my OCD has been suppressed, for now.&lt;/p&gt;

&lt;h2&gt;The Update&lt;/h2&gt;

&lt;p&gt;In the comments, &lt;a href=&quot;http://kevinthompson.info/blog/completely-remove-index-php-from-expressionengine-urls/#comment-15&quot;&gt;Manuel&lt;/a&gt; pointed out the fact that the rules suggested by Erik and Nevin would break any &lt;code&gt;POST&lt;/code&gt; request sent to an &lt;code&gt;index.php&lt;/code&gt; URL. To resolve this, he suggested adding the following condition to the rewrite (which has already been included in the example above) that would restrict it to only &lt;code&gt;GET&lt;/code&gt; requests:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteCond %{THE_REQUEST} ^GET
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Init();</title>
   
     <link href="http://kevinthompson.info/blog/init" />
   
   <updated>2011-03-01T00:00:00-08:00</updated>
   <id>http://kevinthompson.info/blog/init</id>
   <content type="html">&lt;p&gt;I&amp;rsquo;ve oft longed to begin writing in some capacity; likely documenting or dissecting code and disseminating the odd amounts of web development knowledge I&amp;rsquo;ve accumulated over the years. Unfortunately, past attempts have failed as I find myself fumbling around in PhotoShop, manipulating pixels to no end in hopes of finding the &amp;ldquo;perfect&amp;rdquo; design for my phantom content.&lt;/p&gt;

&lt;!&#8211; more &#8211;&gt;


&lt;h2&gt;Time for a change&lt;/h2&gt;

&lt;p&gt;Over the last few weeks, I&amp;rsquo;ve pieced together a relatively simple design and configured the barest of &lt;a href=&quot;http://expressionengine.com&quot;&gt;ExpressionEngine&lt;/a&gt; installations. The site now allows me to post simple blog posts and project entries, and for you, the reader, to navigate them in some capacity. I&amp;rsquo;ve set a goal for myself to produce at least one post per week, and at least one substantial post per month.&lt;/p&gt;

&lt;p&gt;I hope to avoid posting trivial links, photos, or comments to this blog (but you&amp;rsquo;re welcome to &lt;a href=&quot;http://twitter.com/kevinthompson&quot;&gt;follow me on twitter&lt;/a&gt; if you&amp;rsquo;re into that sort of thing), and I hope that over time it will serve as a valuable resource my peers and for fledgling designers and developers&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m excited to finally begin producing content for a community that has fostered my growth as a developer for the past five years, and I hope that you&amp;rsquo;ll enjoy what I have to offer.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Alex Munro Rankin</title>
   
     <link href="http://kevinthompson.info/recommendations/alex-munro-rankin-recommends-kevin-thompson" />
   
   <updated>2010-05-17T00:00:00-07:00</updated>
   <id>http://kevinthompson.info/recommendations/alex-munro-rankin-recommends-kevin-thompson</id>
   <content type="html">&lt;p&gt;Kevin is highly responsive in understanding and translating the needs of the many departments in our company. He is highly detail oriented as a web developer, and also knows how to properly design a website for prime functionality as well as aesthetics. I would highly recommend Kevin as a dependable, professional and dedicated developer.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Melissa Lopez</title>
   
     <link href="http://kevinthompson.info/recommendations/melissa-lopez-recommends-kevin-thompson" />
   
   <updated>2010-04-27T00:00:00-07:00</updated>
   <id>http://kevinthompson.info/recommendations/melissa-lopez-recommends-kevin-thompson</id>
   <content type="html">&lt;p&gt;Kevin is a bright man who&amp;rsquo;s able to develop solutions for projects when at times it seems there are none. He is able to take direction and run with it to develop great websites and programming. The one thing I truly appreciate and will always praise Kevin for is his ability to teach others. He&amp;rsquo;s very patient and explains his processes in a way that others understand quickly and easily. Overall he is an asset to any team.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Angela Bull</title>
   
     <link href="http://kevinthompson.info/recommendations/angela-bull-recommends-kevin-thompson" />
   
   <updated>2010-04-21T00:00:00-07:00</updated>
   <id>http://kevinthompson.info/recommendations/angela-bull-recommends-kevin-thompson</id>
   <content type="html">&lt;p&gt;I would recommend Kevin Thompson to anyone for almost anything, because he is a stand-up guy with integrity, a baffling array of skills, a fantastic sense of humor and an unbeatable work ethic.&lt;/p&gt;

&lt;p&gt;I have worked directly with him on a number of projects related to graphic design, programming, user interface/user experience and general web development. His feedback has always been thorough and useful, his work always meets or exceeds expectations and he is incredibly fast and efficient. You can tell that he loves what he does, and that he&amp;rsquo;s been doing it for a long time.&lt;/p&gt;

&lt;p&gt;Aside from being adept at all things web and design, Kevin is great to work with. He is easygoing, funny and a good communicator, and just an all around cool guy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>BJ Cook</title>
   
     <link href="http://kevinthompson.info/recommendations/bj-cook-recommends-kevin-thompson" />
   
   <updated>2008-09-30T00:00:00-07:00</updated>
   <id>http://kevinthompson.info/recommendations/bj-cook-recommends-kevin-thompson</id>
   <content type="html">&lt;p&gt;Kevin has a knack for using his previous experience in SEO to create great templating systems that support long term strategy. You&amp;rsquo;ll also find him always pushing to make code, widgets and anything front end development better so that the user&amp;rsquo;s needs are always top of mind.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Adam Levenson</title>
   
     <link href="http://kevinthompson.info/recommendations/adam-levenson-recommends-kevin-thompson" />
   
   <updated>2008-09-29T00:00:00-07:00</updated>
   <id>http://kevinthompson.info/recommendations/adam-levenson-recommends-kevin-thompson</id>
   <content type="html">&lt;p&gt;Kevin is a web coding ninja. His knowledge of web standards, html, css and javascript make a valuable asset to our development team. This understanding of SEO and best practices put his abilities in a completely different class of developer. He is hard working, a great team player and a pleasure to work with.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Garry Grant</title>
   
     <link href="http://kevinthompson.info/recommendations/garry-grant-recommends-kevin-thompson" />
   
   <updated>2007-01-09T00:00:00-08:00</updated>
   <id>http://kevinthompson.info/recommendations/garry-grant-recommends-kevin-thompson</id>
   <content type="html">&lt;p&gt;Kevin is a super talented individual and capable or multitasking and coordinating multiple projects! Keving will be heading our Wed Dev team!&lt;/p&gt;
</content>
 </entry>
 

</feed>