<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin Thompson</title>
  <subtitle>Developer</subtitle>
  <id>http://kevinthompson.info/</id>
  <link href="http://kevinthompson.info/"/>
  <link href="http://kevinthompson.info/feed.xml" rel="self"/>
  <updated>2013-06-26T07:00:00Z</updated>
  <author>
    <name>Kevin Thompson</name>
  </author>
  <entry>
    <title>Setting Up an Impact.js Game Development Environment</title>
    <link rel="alternate" href="/blog/2013/06/26/setting-up-an-impact-js-game-development-environment.html"/>
    <id>/blog/2013/06/26/setting-up-an-impact-js-game-development-environment.html</id>
    <published>2013-06-26T07:00:00Z</published>
    <updated>2013-06-26T07:00:00Z</updated>
    <summary type="html">&lt;p&gt;For a number of years now I've wanted to create games. Actually, I've wanted to
create my own games for about as long as I can remember. I've finally decided to
try my hand at creating games for myself and my children, and after evaluating
a number...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;For a number of years now I&amp;#39;ve wanted to create games. Actually, I&amp;#39;ve wanted to
create my own games for about as long as I can remember. I&amp;#39;ve finally decided to
try my hand at creating games for myself and my children, and after evaluating
a number of game development frameworks, I&amp;#39;ve decided that &lt;a href="http://impact.js"&gt;Impact.js&lt;/a&gt;
is the platform that, being a web developer, will be the easiest for me to adopt
and actually create a game with.&lt;/p&gt;

&lt;p&gt;Although there really isn&amp;#39;t much to setting up an Impact.js development environment,
there are a few things that I wanted to be able to do that would make building games
with Impact.js feel more like my daily Ruby development.&lt;/p&gt;

&lt;p&gt;Because Impact.js page require some sort of web server, I wanted them to work
with my development server of choice, &lt;a href="http://pow.cx"&gt;Pow&lt;/a&gt;. You can serve static
files through Pow by simply moving your static files to (in this case the source
of your Impact.js game) to a &lt;code&gt;public&lt;/code&gt; folder, but I wanted a little more control
over my the project routing. More specifically, I also didn&amp;#39;t want to have to
remember how to spell &lt;code&gt;weltmeister.html&lt;/code&gt; so I wanted to be able to remap that URL.&lt;/p&gt;

&lt;p&gt;To solve both of these issues, I decided to add a &lt;code&gt;config.ru&lt;/code&gt; file to my project and use
&lt;code&gt;Rack::Rewrite&lt;/code&gt; to serve the static files, and also to remap &lt;code&gt;/weltmeister.html&lt;/code&gt; to
&lt;code&gt;/edit&lt;/code&gt;. Below are the two files you need to create in order to duplicate my setup:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;
# ./Gemfile
source &amp;#39;https://rubygems.org&amp;#39;

# Rack
gem &amp;#39;rack&amp;#39;
gem &amp;#39;rack-legacy&amp;#39;
gem &amp;#39;rack-rewrite&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;
# ./config.ru
require &amp;#39;rubygems&amp;#39;
require &amp;#39;rack&amp;#39;
require &amp;#39;rack-legacy&amp;#39;
require &amp;#39;rack-rewrite&amp;#39;

INDEXES = [&amp;#39;index.html&amp;#39;,&amp;#39;index.php&amp;#39;]

use Rack::Rewrite do
  rewrite %r{^/edit$}, &amp;#39;/weltmeister.html&amp;#39;
  rewrite %r{(.*/$)}, lambda {|match, rack_env|
    return_path = rack_env[&amp;#39;PATH_INFO&amp;#39;]
    INDEXES.each do |index|
      if File.exists?(File.join(Dir.getwd, rack_env[&amp;#39;PATH_INFO&amp;#39;], index))
        return_path = rack_env[&amp;#39;PATH_INFO&amp;#39;] + index
      end
    end
    return_path
  }
end

use Rack::Legacy::Php, Dir.getwd
run Rack::File.new Dir.getwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;#39;ve created those two files, you&amp;#39;ll need run &lt;code&gt;bundle install&lt;/code&gt; in order
to install the required gems. Now you just need to link your project to Pow
(I&amp;#39;d recommend using the &lt;a href="https://github.com/Rodreegez/powder"&gt;powder gem&lt;/a&gt;) and
you should be able to access your impact game using pow (ex: &lt;a href="http://impact.dev"&gt;http://impact.dev&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t yet have PHP installed, you&amp;#39;ll need to perform a few more steps in
order to get the Weltmeister level editor working properly with this setup. Simply
follow these &lt;a href="https://github.com/josegonzalez/homebrew-php"&gt;instructions for installing PHP using Homebrew&lt;/a&gt;
over on Github and you should be all set.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I&amp;#39;ll continue posting about my experiences with Impact.js as I continue to explore,
and I&amp;#39;d love to hear any tips or recommendations from other Impact.js developers.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Execute Ruby Code Inside of Sublime Text</title>
    <link rel="alternate" href="/blog/2013/02/07/execute-ruby-code-inside-of-sublime-text.html"/>
    <id>/blog/2013/02/07/execute-ruby-code-inside-of-sublime-text.html</id>
    <published>2013-02-07T08:00:00Z</published>
    <updated>2013-02-07T08:00:00Z</updated>
    <summary type="html">&lt;p&gt;Lately I've been watching a lot of &lt;a href="http://devblog.avdi.org/"&gt;Avdi Grimm's&lt;/a&gt; excellent Ruby screencast series, &lt;a href="http://devblog.avdi.org/rubytapas/"&gt;Ruby Tapas&lt;/a&gt; (if you haven't seen any of these, I strongly recommend you subscribe, or if nothing else, watch the &lt;a href="http://devblog.avdi.org/rubytapas-free-monday-episodes/"&gt;free episodes&lt;/a&gt;) In Avdi's videos he can often be seen executing...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Lately I&amp;#39;ve been watching a lot of &lt;a href="http://devblog.avdi.org/"&gt;Avdi Grimm&amp;#39;s&lt;/a&gt; excellent Ruby screencast series, &lt;a href="http://devblog.avdi.org/rubytapas/"&gt;Ruby Tapas&lt;/a&gt; (if you haven&amp;#39;t seen any of these, I strongly recommend you subscribe, or if nothing else, watch the &lt;a href="http://devblog.avdi.org/rubytapas-free-monday-episodes/"&gt;free episodes&lt;/a&gt;) In Avdi&amp;#39;s videos he can often be seen executing example ruby code in which the output is returned directly in the editor. Avdi uses Emacs in his videos, but personally I prefer &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;, and I wanted to find a way to do the same in my browser of choice.&lt;/p&gt;

&lt;p&gt;A bit of Googling led me to a few pre-existing solutions, but none worked quite the way I wanted, so I modify the existing solutions to meet my needs. &lt;/p&gt;

&lt;p&gt;My version of RubyEval was originally forked from &lt;a href="https://github.com/jugyo/SublimeRubyEval"&gt;jugyo/SublimeRubyEval&lt;/a&gt;, but the code is primarily based off of examples privided in &lt;a href="http://superuser.com/questions/472413/is-there-a-way-to-execute-and-update-markers-in-sublime-text-2"&gt;this superuser.com post&lt;/a&gt;. This package is available as a git repo here: &lt;a href="https://github.com/kevinthompson/SublimeRubyEval"&gt;https://github.com/kevinthompson/SublimeRubyEval&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a quick example of how to install and start using this package:&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;pre&gt;&lt;code class="bash"&gt;cd ~/Library/Application\ Support/Sublime\ Text\ 2/Packages
git clone https://github.com/kevinthompson/SublimeRubyEval.git RubyEval
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Usage&lt;/h2&gt;

&lt;p&gt;RubyEval will evaluate either your entire file, or the selected region, and will replace any instance of &lt;code&gt;# =&amp;gt;&lt;/code&gt; with its evaluated result. Simply add &lt;code&gt;# =&amp;gt;&lt;/code&gt; to the end of each line that you&amp;#39;d like to display the evaluated result of, then optionally select the region to parse, and execute the &lt;code&gt;ruby_eval&lt;/code&gt; command using your assigned hotkey, or through Sublime Text 2&amp;#39;s command pallette.&lt;/p&gt;

&lt;p&gt;By default, the &lt;code&gt;ruby_eval&lt;/code&gt; command is bound to &lt;code&gt;super+k, super +e&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Example Input/Output&lt;/h2&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Person
  attr_accessor :name

  def initialize(name)
    self.name = name
  end
end

p = Person.new(&amp;#39;Kevin&amp;#39;)
p.name # =&amp;gt; &amp;quot;Kevin&amp;quot;
p.age # =&amp;gt; 
# ~&amp;gt; -:11: undefined method `age&amp;#39; for #&amp;lt;Person:0x10ecef310 @name=&amp;quot;Kevin&amp;quot;&amp;gt; (NoMethodError)
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Reset Batman.js Object Attributes</title>
    <link rel="alternate" href="/blog/2013/01/28/reset-batman-js-object-attributes.html"/>
    <id>/blog/2013/01/28/reset-batman-js-object-attributes.html</id>
    <published>2013-01-28T08:00:00Z</published>
    <updated>2013-01-28T08:00:00Z</updated>
    <summary type="html">&lt;p&gt;Today I was trying to find a way to reset the attributes of an object in &lt;a href="http://batmanjs.org"&gt;Batman.js&lt;/a&gt; if, for example, the object was being edited in a model window and the user clicked a "cancel" button.&lt;/p&gt;

&lt;p&gt;Since Batman.js already stores the modified keys and their original...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today I was trying to find a way to reset the attributes of an object in &lt;a href="http://batmanjs.org"&gt;Batman.js&lt;/a&gt; if, for example, the object was being edited in a model window and the user clicked a &amp;quot;cancel&amp;quot; button.&lt;/p&gt;

&lt;p&gt;Since Batman.js already stores the modified keys and their original values in a hash accessible through the &lt;code&gt;dirtyKeys&lt;/code&gt; method, I simply needed to iterate over that hash, setting each key equal to its original value:&lt;/p&gt;

&lt;pre&gt;&lt;code class="coffeescript"&gt;class App.Model extends Batman.Model
  # ...
  reset: -&amp;gt;
    @get(&amp;#39;dirtyKeys&amp;#39;).forEach (key, val) =&amp;gt; @set(key,val)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method works great for resetting a single object, but I quickly realized that I often edit related objects within the same modal as their parent (an example being multiple email address objects belonging to a person object). To expand the reset functionality, I started looking into how I might crawl the tree of relationships for a given model.&lt;/p&gt;

&lt;p&gt;After a bit of tinkering, &lt;a href="https://twitter.com/theberg"&gt;Jeff Berg&lt;/a&gt; and I eventually came up with the following solution:&lt;/p&gt;

&lt;pre&gt;&lt;code class="coffeescript"&gt;class App.Model extends Batman.Model
  # ...
  reset: -&amp;gt;
    @get(&amp;#39;dirtyKeys&amp;#39;).forEach (key, val) =&amp;gt; @set(key,val)
    associations = @constructor._batman.get(&amp;#39;associations&amp;#39;)
    return unless associations?
    hasAssociations = new Batman.SimpleSet
    hasAssociations = hasAssociations.merge(associations.getByType(&amp;#39;hasMany&amp;#39;)) if associations.getByType(&amp;#39;hasMany&amp;#39;)?
    hasAssociations = hasAssociations.merge(associations.getByType(&amp;#39;hasOne&amp;#39;)) if associations.getByType(&amp;#39;hasOne&amp;#39;)?
    hasAssociations.forEach (association) =&amp;gt;
      className = association.options.name
      relatedModel = Batman.currentApp?[className]
      objects = relatedModel.get(&amp;#39;loaded&amp;#39;).indexedBy(association.foreignKey).get(@get(&amp;#39;id&amp;#39;))
      objects.forEach (object) =&amp;gt; object.reset()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The additional block of code here starts by grabbing all associations on the object that create either a &lt;code&gt;hasMany&lt;/code&gt; or a &lt;code&gt;hasOne&lt;/code&gt; relationship. For each relevant association found, we then get all loaded objects for that association&amp;#39;s model (as to avoid loading objects that have not yet been retrieved or modified) and reset those child objects as well.&lt;/p&gt;

&lt;p&gt;Once our reset method is in place, we simply need to call the method on a loaded object:&lt;/p&gt;

&lt;pre&gt;&lt;code class="coffeescript"&gt;person = App.Person.find(1)
person.get(&amp;#39;name&amp;#39;)              #=&amp;gt; &amp;#39;Sterling Archer&amp;#39;
person.set(&amp;#39;name&amp;#39;, &amp;#39;Dutchess&amp;#39;)  #=&amp;gt; &amp;#39;Dutchess&amp;#39;
person.get(&amp;#39;name&amp;#39;)              #=&amp;gt; &amp;#39;Dutchess&amp;#39;
person.reset()
person.get(&amp;#39;name&amp;#39;)              #=&amp;gt; &amp;#39;Sterling Archer&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Scroll Past The End of a File in Sublime Text 2</title>
    <link rel="alternate" href="/blog/2013/01/24/scroll-past-end-of-file-in-sublime-text-2.html"/>
    <id>/blog/2013/01/24/scroll-past-end-of-file-in-sublime-text-2.html</id>
    <published>2013-01-24T08:00:00Z</published>
    <updated>2013-01-24T08:00:00Z</updated>
    <summary type="html">&lt;p&gt;When I'm working with larger files in Sublime Text 2, it's a little annoying to reach the bottom of the file and be staring at the bottom of my screen. Because I don't want to litter my files and diffs with unnecessary newlines, I was determined to...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;When I&amp;#39;m working with larger files in Sublime Text 2, it&amp;#39;s a little annoying to reach the bottom of the file and be staring at the bottom of my screen. Because I don&amp;#39;t want to litter my files and diffs with unnecessary newlines, I was determined to find a better solution.&lt;/p&gt;

&lt;p&gt;After a bit of Googling, I found that with the addition of one simple option in my user preferences, I was able to scroll past the end of a file without adding any additional characters.&lt;/p&gt;

&lt;h2&gt;Adding The Option&lt;/h2&gt;

&lt;p&gt;To start, open your user preferences by pressing &lt;code&gt;⌘ + ,&lt;/code&gt;. Next, add &lt;code&gt;&amp;quot;scroll_past_end&amp;quot;: true&lt;/code&gt; to your user preferences hash and save the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;{
  // ...
  &amp;quot;scroll_past_end&amp;quot;: true
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#39;s it! Now you should be able to scroll past the bottom of any file. As an additional tip, if you&amp;#39;re a hotkey junky like me, you can also hold &lt;code&gt;Ctrl + Option&lt;/code&gt; and press the up or down arrow key to scroll the file without using a mouse.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Testing An OAuth API Using cURL</title>
    <link rel="alternate" href="/blog/2013/01/14/testing-an-oauth-api-using-curl.html"/>
    <id>/blog/2013/01/14/testing-an-oauth-api-using-curl.html</id>
    <published>2013-01-14T08:00:00Z</published>
    <updated>2013-01-14T08:00:00Z</updated>
    <summary type="html">&lt;p&gt;I'm in the process of updating the API documentation over at &lt;a href="http://get.planningcenteronline.com"&gt;Planning Center Online&lt;/a&gt; and I wanted to be sure that the sample JSON I was providing our users in the documentation matched the actual JSON returned. I didn't want to create an entire sample...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;#39;m in the process of updating the API documentation over at &lt;a href="http://get.planningcenteronline.com"&gt;Planning Center Online&lt;/a&gt; and I wanted to be sure that the sample JSON I was providing our users in the documentation matched the actual JSON returned. I didn&amp;#39;t want to create an entire sample OAuth app to test this, so I did a little research into how I might test OAuth requests using cURL.&lt;/p&gt;

&lt;p&gt;It turns our theres a nice OAuth Proxy server written by Seth Fitzsimmons called, surprisingly, &lt;a href="https://github.com/mojodna/oauth-proxy"&gt;OAuth Proxy&lt;/a&gt;. To get started, you need to first install OAuth Proxy, preferrably using a package manager such as &lt;a href="http://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt; using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;pip install oauth-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;#39;ve got OAuth Proxy installed, you can run it in a terminal session using:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;oauth-proxy --consumer-key &amp;lt;consumer key&amp;gt; --consumer-secret &amp;lt;consumer secret&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this was a great start, it still didn&amp;#39;t get me where I wanted to be. For starters, I not only needed to create a consumer application to use our API, I also needed a user with a token and token secret so that my cURL requests were sent as an authenticated user. This meant that I needed also pass the &lt;code&gt;--token&lt;/code&gt; and &lt;code&gt;--token-secret&lt;/code&gt; parameters as well. &lt;/p&gt;

&lt;p&gt;Since I didn&amp;#39;t yet have a token or token secret yet for my development users, I dove into the development database for our Rails application and added a record to our &lt;code&gt;oauth_tokens&lt;/code&gt; table for a seeded user with simlpiefied values such as &amp;#39;foo&amp;#39; and &amp;#39;bar&amp;#39;. With values seeded in my database for the client application and oauth token, I was then able to invoke the OAuth Proxy with a command such as:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;oauth-proxy --consumer-key foo --consumer-secret bar --token foo --token-secret bar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy to remember, or better yet, create an alias for. With the OAuth Proxy running, I can then begin issuing curl requests to API enpoints:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;curl -x localhost:8001 localhost:3000/users.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My next step is going to be to add the client application and oauth token records the seed for our Rails apps so that any developer can fire up OAuth Proxy using a simplified, common set of credentials, and begin firing off cURL requests to our API.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Another library that I&amp;#39;d like to recommend with setup would be &lt;a href="https://github.com/jkbr/httpie"&gt;HTTPie&lt;/a&gt;. HTTPie simplifies cURLs CLI letting you easily specify HTTP verbs and post data. With HTTPie, the cURL request above would be written as:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;http --proxy=http:localhost:8001 localhost:3000/users.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I strongly recommend you take a look at HTTPie if you use command line cURL at all.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Passing Arbitrary Route Parameters to Controller Actions in Batman.js</title>
    <link rel="alternate" href="/blog/2012/12/18/passing-arbitrary-route-parameters-to-controller-actions-in-batman-js.html"/>
    <id>/blog/2012/12/18/passing-arbitrary-route-parameters-to-controller-actions-in-batman-js.html</id>
    <published>2012-12-18T08:00:00Z</published>
    <updated>2012-12-18T08:00:00Z</updated>
    <summary type="html">&lt;p&gt;This morning I was trying find a way to use the same controller action to create an object with one of two different types. For the same of simplicity, let's say I'm creating list items through a controller named &lt;code&gt;ListItemsController&lt;/code&gt; and my list items...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;This morning I was trying find a way to use the same controller action to create an object with one of two different types. For the same of simplicity, let&amp;#39;s say I&amp;#39;m creating list items through a controller named &lt;code&gt;ListItemsController&lt;/code&gt; and my list items can either be an &amp;quot;item&amp;quot; or a &amp;quot;heading&amp;quot;. &lt;/p&gt;

&lt;p&gt;In my interface I had two different links, &amp;quot;Add New List Item&amp;quot; and &amp;quot;Add New List Heading&amp;quot;, and wanted to handle both type instances using the &lt;code&gt;ListItemsController#new&lt;/code&gt; action, so I needed a way to pass the &amp;quot;type&amp;quot; attribute through my route.&lt;/p&gt;

&lt;p&gt;It turns out Batman.js allows you to pass a hash of parameters to your routes, which can include arbitrary key value pairs, in addition to the common route attributes such as &amp;quot;controller&amp;quot; and &amp;quot;action&amp;quot;. In my case, this meant adding a &lt;code&gt;@collection&lt;/code&gt; route definintion for &amp;quot;heading&amp;quot;, then passing it a hash including the action that I wanted the route to point to, and my &amp;quot;type&amp;quot; attribue.&lt;/p&gt;

&lt;pre&gt;&lt;code class="coffeescript"&gt;@resources &amp;#39;list_items&amp;#39; -&amp;gt;
  @collection &amp;#39;heading&amp;#39;, { action: &amp;#39;new&amp;#39;, type: &amp;#39;heading&amp;#39; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the additional route was defined, I was able to create my two list item creation links using the following route syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;a data-route=&amp;quot;routes.listItems.new&amp;quot;&amp;gt;Add New List Item&amp;lt;/a&amp;gt;
&amp;lt;a data-route=&amp;quot;routes.listItems.heading&amp;quot;&amp;gt;Add New List Heading&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
</feed>
